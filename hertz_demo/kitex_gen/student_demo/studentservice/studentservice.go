// Code generated by Kitex v0.9.1. DO NOT EDIT.

package studentservice

import (
	student_demo "github.com/lossfaller/hertz_demo/kitex_gen/student_demo"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newStudentServiceRegisterArgs,
		newStudentServiceRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Query": kitex.NewMethodInfo(
		queryHandler,
		newStudentServiceQueryArgs,
		newStudentServiceQueryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	studentServiceServiceInfo                = NewServiceInfo()
	studentServiceServiceInfoForClient       = NewServiceInfoForClient()
	studentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return studentServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return studentServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return studentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StudentService"
	handlerType := (*student_demo.StudentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "student_demo",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*student_demo.StudentServiceRegisterArgs)
	realResult := result.(*student_demo.StudentServiceRegisterResult)
	success, err := handler.(student_demo.StudentService).Register(ctx, realArg.Student)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceRegisterArgs() interface{} {
	return student_demo.NewStudentServiceRegisterArgs()
}

func newStudentServiceRegisterResult() interface{} {
	return student_demo.NewStudentServiceRegisterResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*student_demo.StudentServiceQueryArgs)
	realResult := result.(*student_demo.StudentServiceQueryResult)
	success, err := handler.(student_demo.StudentService).Query(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceQueryArgs() interface{} {
	return student_demo.NewStudentServiceQueryArgs()
}

func newStudentServiceQueryResult() interface{} {
	return student_demo.NewStudentServiceQueryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, student *student_demo.Student) (r *student_demo.RegisterResp, err error) {
	var _args student_demo.StudentServiceRegisterArgs
	_args.Student = student
	var _result student_demo.StudentServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, req *student_demo.QueryReq) (r *student_demo.Student, err error) {
	var _args student_demo.StudentServiceQueryArgs
	_args.Req = req
	var _result student_demo.StudentServiceQueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
